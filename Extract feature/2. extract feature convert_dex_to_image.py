import numpy as np
import pandas as pd
import csv
import binascii
import base64
import os
import glob
import re
import zipfile
import csv 
from csv import writer
from csv import reader
import math


'''
folder = 'D:\\Data\\drebin-0'
i =0
for filename in os.listdir(folder):
	infilename = os.path.join(folder,filename)
	name, ext = os.path.splitext(infilename)
	if (ext!=".apk"):
		os.rename(infilename, name + ".apk")
		i=i+1
print("Có %d số file đã được chuyển sang đuôi APK" %(i))
'''
#def apktodex(path):
# list_dex_file_no_apk = glob.glob("G:\\1a. NCKH\\Drebin\\drebin-5\\drebin-5\\*")
# for i in list_dex_file_no_apk:
#     os.rename(i, i+'.apk')
# apk_path = glob.glob("D:\\Data\\Dex_Train\\*.apk")
list_dex_file = glob.glob(r"H:\Lost_File_AMD\Dowgin\*.apk")
path_xuat = r"H:\Lost_File_AMD\Lost_File.csv"
def apktodex():
    for i in apk_path:
        if zipfile.is_zipfile(i):
            with zipfile.ZipFile(i) as z:
                check = z.namelist()
                if 'classes.dex' in check :
                    try:
                        with open(i+'.dex', 'wb') as f:
                            f.write(z.read('classes.dex'))
                    except: print("error zip file !")
                if 'classes1.dex' in check :
                    try:
                        with open(i+'1.dex', 'wb') as f:
                            f.write(z.read('classes.dex'))
                    except: print("error zip file !")
                if 'classes2.dex' in check :
                    try:
                        with open(i+'2.dex', 'wb') as f:
                            f.write(z.read('classes.dex'))
                    except: print("error zip file !")
                if 'classes3.dex' in check :
                    try:
                        with open(i+'3.dex', 'wb') as f:
                            f.write(z.read('classes.dex'))
                    except: print("error zip file !")
# apktodex()
#########################
def mof_value(a,leng_trungbinh):
    if (len(a)-1)/3 < leng_trungbinh :
        x = int(leng_trungbinh-((len(a)-1)/3))
        p_blue = int(1+((len(a)-1)/3)*3)
        p_green = int(1+((len(a)-1)/3)*2)
        p_red = int(1+((len(a)-1)/3))
        for i in range(x):
            a.insert(p_blue, '0')
        for i in range(x):
            a.insert(p_green, '0')
        for i in range(x):
            a.insert(p_red, '0')
		
    if (len(a)-1)/3 > leng_trungbinh :
        del_value = int(((len(a)-1)/3)-leng_trungbinh)
		
        start_red = int((1+((len(a)-1)/3)-del_value))
		
        start_green = int((1+((len(a)-1)/3)*2-del_value))
		
        start_blue = int((1+((len(a)-1)/3)*3-del_value))
		
        p_blue = int(1+((len(a)-1)/3)*3)
		
        p_green = int(1+((len(a)-1)/3)*2)
		
        p_red = int(1+((len(a)-1)/3))
		
        del a[start_blue:p_blue]
        del a[start_green:p_green]
        del a[start_red:p_red]

    if (len(a)-1)/3 > leng_trungbinh :
        print("Nothing Change !")

#########################
def mof_value_gray(a,trung_binh):
    if(len(a)) > trung_binh:
        del a[trung_binh:len(a)]
    if(len(a)) < trung_binh:
        x = int(trung_binh-len(a))
        for i in range(x):
            a.append('0')
#########################

#########################
def hex_to_rgb(hex):
     hex = hex.lstrip('#')
     hlen = len(hex)
     return tuple(int(hex[i:i+2], 16) for i in (0, 2, 4))
########################

xuat_csv_r = []
xuat_csv_g = []
xuat_csv_b = []
xuat_csv_gray = []
xuat_csv = []
do_dai = []
csv_rgb = []
leng_trungbinh = 16384

########################

for file_dex_name in list_dex_file:
    with open(file_dex_name, "rb") as infile:
        content = infile.read()
        hex_bytes = binascii.hexlify(content)
        hex_str = hex_bytes.decode('utf-8')   #chuyển text sang hex
    #chia dex dạng hex sang list 6 kí tự 1 
        list_hexrgb = re.findall('.{1,6}', hex_str)
        try:
            if(len(list_hexrgb[-1])<6):
                list_hexrgb[-1] = list_hexrgb[-1]+'0'*(6-len(list_hexrgb[-1]))
        except: print('out of range')
    ######################################  
    print(len(list_hexrgb))
    arr_r=[]
    arr_g=[]
    arr_b=[]
    arr_gray= []
    for i in list_hexrgb:
        rgb_temp = hex_to_rgb(i)
        # Anh xam
        gray_pixel = 0.2989*rgb_temp[0]+0.5870*rgb_temp[1]+0.1140*rgb_temp[2]
        # Anh mau
        # arr_r.append(rgb_temp[0])
        # arr_g.append(rgb_temp[1])
        # arr_b.append(rgb_temp[2])
        arr_gray.append(gray_pixel)
    # do_dai.append(len(arr_r))
    arr_gray.insert(0, file_dex_name)
    mof_value_gray(arr_gray, leng_trungbinh)
    tem_csv_rgb = arr_r+arr_g+arr_b
    # tem_csv_rgb.insert(0, file_dex_name)
    # print("do dai tem_csv_rgb : ", len(tem_csv_rgb))
    # print(tem_csv_rgb[100:120])
    # xuat_csv_r.append(arr_r)
    # xuat_csv_g.append(arr_g)
    # xuat_csv_b.append(arr_b)
    xuat_csv_gray.append(arr_gray)
    # xuat_csv.append(tem_csv_rgb)

#do_dai_tbc= sum(do_dai)/len(do_dai) #trung binh do dai 1 mau r(bg)
#dodai_trungbinh_padding = (int(round(math.sqrt(do_dai_tbc))+1))*(int(round(math.sqrt(do_dai_tbc))+1)) #Them padding cho thành Flatten vuong

# print("R :", len(xuat_csv_r))
# print("G :", len(xuat_csv_g))
# print("B :", len(xuat_csv_b))
print("Gray :", len(xuat_csv_gray))
# print("Xuat_csv_gray :", len(xuat_csv_gray), xuat_csv_gray[0][0:10], xuat_csv_gray[0][-1] )
for i in xuat_csv_gray:
    print("do dai Gray ", len(i))

# print("Do dai xuat_csv", len(xuat_csv))
# print("List do dai tung dex /3 ", do_dai)
#print("Do dai trung binh them padding :" , dodai_trungbinh_padding)
# print("Do dai csv xuat ", len(xuat_csv))


def Xuat_csv(file_path, temp_csv):
  f = open(file_path, 'a', newline='', encoding='utf-8')
  with f:
    writer = csv.writer(f)
    for row in temp_csv:
      writer.writerow(row)


Xuat_csv(path_xuat, xuat_csv_gray)
